/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: bluoppVR (https://sketchfab.com/bluoppVR)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/space-helmet-7b095c71ce844118bf5fc9af2f3accd0
Title: Space Helmet
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useEffect, useState } from "react";
import { lerp } from "three/src/math/MathUtils.js";

type GLTFResult = GLTF & {
  nodes: {
    Object_4: THREE.Mesh;
  };
  materials: {
    Material_MR: THREE.MeshStandardMaterial;
  };
};

export function SpaceHelmet(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/space_helmet.glb") as GLTFResult;
  const [mousePos, setMousePos] = useState({
    x: 0,
    y: 0,
  });

  useEffect(() => {
    window.addEventListener("mousemove", (e) => {
      setMousePos((prev) => ({
        ...prev,
        x: (2 * e.clientX) / window.innerWidth - 1,
        y: -((2 * e.clientY) / window.innerHeight - 1),
      }));
    });

    return () =>
      window.removeEventListener("mousemove", (e) => {
        setMousePos((prev) => ({
          ...prev,
          x: (2 * e.clientX) / window.innerWidth - 1,
          y: -((2 * e.clientY) / window.innerHeight - 1),
        }));
      });
  }, []);

  return (
    <group {...props} dispose={null}>
      <group
        rotation={[lerp(-mousePos.y, 0, 0.5), lerp(mousePos.x, 0, 0.5), 0]}
        scale={2.3}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4.geometry}
          material={materials.Material_MR}
          rotation={[Math.PI / 2, 0, 0]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/space_helmet.glb");
